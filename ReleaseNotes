0.6.2
    - Configuration: rtps.writer.push-mode=true|false, jrtps.publish-builtin-data=true|false
    
0.6.1
    - Documentation is being generated with maven site plugin
    - jRTPS thread names contains domainId.participantId, which is 
      useful in debugging.
	
0.6.0
    - moved RTPS entities (RTPSParticipant, RTPSReader, ...) to net.sf.jrtps.rtps package.
    - Combined udds & jrtps. Now there is only one artifact: net.sf.jrtps:jrtps.
    - FIX: SequenceNumber long conversion

0.5.6
	- Rearranged udds test to examples. Initial interoperability tests for 
	  OpenSplice and OpenDDS. Not interoperable for now :|
	- FIX: Heartbeat announce period is applied only for reliable writers
	- FIX: Heartbeat response delay is applied before AckNack gets created
	- FIX: SequenceNumberSet reading/writing
	
0.5.5	
	- Artifacts are OSGi bundles

0.5.1
	- Heartbeat period
	- Artifacts are OSGi bundles
	- Renamed ReaderData -> SubscriptionData, WriterData PublicationData
	  to be more in sync with DDS specification.
	- JavaExternalizableMarshaller introduced.
	- FIX: Discovered participants was not propagated to RTPS layer. 
	- ParticipantLeaseManager introduced

0.5.0
	- Moved some classes from net.sf.jrtps to udds. Most of the DDS 
	  knowledge is moved. jRTPS remains as a communication library, 
          dealing with message parsing and handling of different RTPS 
	  messages, like Heartbeat & AckNack.
	  
	  The contract between DDS and RTPS is clarified. In short, DDS 
	  implementation is responsible for creation of RTPS entities. Also, 
	  determination of matched reader/writer is the responsibility of DDS 
	  layer. For writers, data is communicated through WriterCache and 
	  by a call to notifyReaders(). QualityOfService stuff is moved to 
	  uDDS as much as possible.
	
0.4.3
	- History cache work.
	- QosDurability. VOLATILE readers are sent only data after match 
	  making. For other readers, TRANSIENT_LOCAL behavior is presented.
	- QosResourceLimits: resource limits are checked. OutOfResources is 
	  thrown if exceeded.
	- QosHistory: history depth may be given. TimeoutException is thrown 
	  if a sample cannot be added reliably.
	- QosReliability: max_blocking_time. Writer blocks, if some of the 
	  reader has not received a sample and addition would drop that 
	  sample. Works in conjunction with QosHistory. 
	
0.4.2
	- Configuration with jrtps.properties: Thread pool can be tuned, 
	  heartbeatResponseDelay, nackResponseDelay, SPDP resend data period.
	- FIX: mapping of Reliabilitykind_t on the wire. This time for 
	  BEST_EFFORT :)

0.4.1
	- QosLiveliness. Partly implemented. Writer side is implemented but 
	  readers don't react on liveliness of the writers. 
	- QosReliability
	- FIX: QoS is marshalled/unmarshalled during discovery. Improved 
	  logging of QoS of discovered entities.
	- FIX: mapping of Reliabilitykind_t on the wire

0.4.0
	- Added skeletal QualityOfService at RTPS/udds layer. Entities are 
	  checked for compatible QoS before adding corresponding matched 
	  entity. QualityOfService is initialized with default values. Note, 
	  that actual Quality of Service policies are not utilized in any way.
	  
0.3.1
	- FIX: set endianness correctly according to sub-message header
	- Added some simple tests
	- buffer size is configurable
	
0.3.0
	- RTPSReader produces Samples to SampleListener
	- Fine tuned visibility.

0.2.2
	- Improved generics
	- @Key annotation is supported by JavaSerializationMarhaller, which is
	  the default marshaller for udds. Keys are marshalled by serializing 
	  fields. This results in PID_KEY_HASH being always a MD5 checksum. 
	- custom Marshallers can be registered to udds Participant
	  
0.2.1
	- Added Key as a concept; Readers and Writers are created with kind 
	  WITH_KEY or NO_KEY. At RTPS level. If key is present, Data 
	  sub-message is marshalled accordingly. uDDS remains as NO_KEY.
	- Fixed some class visibility issues
	- Added some javadocs
	
0.2.0	
	- Turned into multi module build; jrtps & udds separated.
	  udds likely needs to be moved to another package. 
	- hello world sample in udds/src/test

0.1.0	
	- Initial import
