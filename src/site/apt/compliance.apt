Compliance

 This page tries to explain what is implemented and what is not. This server two purposes;
 One is for the users of jRTPS, they should be able to see what to expect. Other is
 for developers, they should be able to see what needs to be implemented. 
 Idea is not to provide very detailed view of the implementation status.
 

* Submessages

 Following submessages are implemented and <should> work as expected: 
 <ACKNACK, DATA, HEARTBEAT, INFOSOURCE, INFOTIMESTAMP, GAP>. In normal case, 
 RTPS entities use these submessages to exchange data with each other.
 
 Following submessages are ignored: <INFODESTINATION, INFOREPLY, INFOREPLYIP4>. These
 messages are used when relaying data, which is not implemented by jRTPS/udds. 
 
 Following submessages are not handled in any way: <DATAFRAG, HEARTBEATFRAG, NACKFRAG>
 These messages are used with large data. I.e. Data messages that are bigger than 64k,
 which is the maximum size of Data to be sent over the network.
 Data fragmentation is an optional, as explained in chapter 8.4.14 of the RTPS v2.1
 specification.


* Writer Liveliness protocol

 From the writer point of view, all kinds of Liveliness QoS are supported; 
 <AUTOMATIC, MANUAL_BY_PARTICIPANT, MANUAL_BY_TOPIC>. From the reader point of view,
 if writers liveliness is lost, application is not aware of this fact.
 

* Inline QoS parameters

 If reader requests inline QoS to be sent with every Data submessages, jRTPS writer will do just that.
 This is determined during discovery; if subscription data received contains 
 <PID_EXPECTS_INLINE_QOS(0x0043)>, reader is marked as needing inline QoS to be sent.

 In Addition, following inlineable parameters are recognised and handled by jRTPS: 
 <PID_COHERENT_SET(0x0056), PID_DIRECTED_WRITE(0x0057), PID_KEYHASH(0x0070), PID_STATUS_INFO(0x0071)>.
 
 For the Coherent sets, udds supports writing of collections coherently.
 For access scope <GROUP>, RTPS specification says that 
 <"the extensions required for access scope GROUP are not yet defined">, and thus
 jRTPS does not support access scope <GROUP>. 
 
 jRTPS writers does not support directed writes, but readers handle them correctly(not tested).
 
 Following inlineable parameters are not handled by jRTPS: 
 <PID_CONTENT_FILTER_INFO(0x0055), PID_PROPERTY_LIST(0x0059), PID_ORIGINAL_WRITER_INFO(0x0061)>
 


* Interoperability

 Even while interoperability is not about being compliant to anything, if two independent
 implementations can communicate with each other, there is at least some level of 
 compliance to specification. With both implementations.
 
 jRTPS is known to be interoperable with {{{http://www.opendds.org/}OpenDDS 3.5}}.
 Within jRTPS sources, there are publisher and subscriber (<examples.opendds.messenger>)
 that talk to OpenDDS example <DevGuideExamples/DCPS/Messenger> counterparts.
 
