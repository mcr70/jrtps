Quality of Service

 Quality Of Service is a way to configure system, and to make a contract between readers and writers 
 of the expected behavior. During discovery, participants interchange Quality Of Service information
 of each entity they manage. For any given topic, its readers and writers can start communication
 if their Quality of Service is compatible.

* Reliability

 Reliability QoS determines how samples are communicated from writers to readers. RELIABLE kind
 causes RTPS entities to exchange <HeartBeat> and <AckNack> messages. I.e. readers will report
 back to writers what samples they have received, and what are still missing. By using these messages,
 writers can eventually communicate all the changes in correct order to readers.
 
 When BEST_EFFORT kind is used, writers just sends samples to readers. That is the only promise
 writer makes about delivery of messages. Samples might be lost during transmission, or reader
 might decide to drop samples before it passes them to application.
 
 If a reader requests BEST_EFFORT reliability but writer offers RELIABLE, a communication will
 be established as BEST_EFFORT, since BEST_EFFORT entities does not use <HeartBeat> and <AckNack>
 sub messages.
 
 Reliability QoS between reader and writer is compatible, if 
 
+------
 offered.kind >= requested.kind
+------
 
 where BEST_EFFORT \< RELIABLE
 
 
* Durability

 Durability QoS is used to control how historical data is communicated to readers.
 If VOLATILE kind is used, readers will not get any historical data. A reader will
 start getting samples only after reader and writer has been matched.
 jRTPS writers checks durability of reader during matching. If kind is VOLATILE, 
 writer will mark reader as received all the samples so far. In all other
 cases, writer will notify readers of the changes available.
 
 Durability QoS between reader and writer is compatible, if 
 
+------
 offered.kind >= requested.kind
+------
 
 where VOLATILE \< TRANSIENT_LOCAL \< TRANSIENT \< PERSISTENT
  