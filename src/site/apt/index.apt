Overview

 jRTPS is an implementation of {{{http://www.omg.org/spec/DDSI-RTPS/2.1/}RTPS 2.1}} protocol by OMG.
 RTPS protocol is designed to provide interoperability between different 
 {{{http://www.omg.org/spec/DDS/}DDS}} implementations. 
 jRTPS also provides a simplistic DDS alike programming interface, 
 {{{./apidocs/net/sf/jrtps/udds/package-summary.html}udds}}, 
 that can be used to read/write data from/to DDS domain. There is also an ongoing effort, 
 {{{http://jdds.sourceforge.net}jDDS}}, that utilizes jRTPS as its transport.

 Here is a list of related OMG documents
 
 * {{{http://www.omg.org/spec/DDSI-RTPS/}RTPS}}. This is the main document
   used in implementation of jRTPS. Current implementation is based on version 
   2.1 of the specification. However, version 2.2 is also available.
   
 * {{{http://www.omg.org/spec/DDS/}DDS}}. DDS specification is used as a reference
   while implementing uDDS.
 
 * {{{http://www.omg.org/spec/DDS-XTypes/}X-Types}}. Some of the parameter IDs
   and new QoS policies are found in this document. See Annex D: DDS Built-in Topic Data Types.

 * {{{http://www.omg.org/spec/DDS-SECURITY/}DDS security}}. At some point,
   jRTPS will be 100% wire compatible with this specification.

 * {{{http://www.omg.org/spec/dds4ccm/}DDS4CCM}}. While jRTPS does not try
   to address most of this document, XML QoS definition looks interesting. 

* ChangeLog

 Full ChangeLog can be seen in {{{http://sourceforge.net/p/jrtps/code/ci/default/tree/ChangeLog}here}}

 1.3.2
 
    * Disabled IPv6

    * Added examples.rti.hello that talks to RTI Connext 5.1.0. 

    * Fixed reading of TypeObject and PropertyList parameters
    
    * Fixed DestinationOrder
    
    * Config: udds.entity-listener-history 

 1.3.1
 
    * FIX: Removed references to SampleFilter. ContentFilter is used instead.
  
 1.3.0
 
    * OMG assigned vendorId 0x0121
    
    * Changes to quality of service is tracked and sent to remote entities 
      with SEDP.
    
    * typeName is stored in Entity, EntityFactory gets typeName parameter 
      in create methods
    
    * Content filter support. Readers can do reader side filtering and
      optionally inform writers of the filter setup. Content filter class name 'java': 
      jRTPS writers interprets filterExpression as a fully qualified class name of 
      java class, that implements ContentFilter interface, and tries to register this
      filter automatically when matched with reader. 
      DDSSQL parsing is not implemented by jRTPS.

    
