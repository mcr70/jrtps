1.2.1
	- FIX: shared secret was not used :|
	- Config: udds.security.no-op.shared-secret This configuration is used 
	  if authentication is set to none, and rtps-protection is set to 
	  something other than none.
	  
1.2
    - Guid is created by AuthenticationPlugin. 
    - Renamed KeystoreAuthenticationPlugin to JKSAuthenticationPlugin
    - Security: Securing content with Transformers; MacTransformer, 
      CipherTransformer, CompositeTransformer

1.1
    - security: authentication & shared secret exchange
    
1.0.1
    - FIX: NPE when explicitly registering an instance. This does not affect 
      uDDS, as relevant API call is not public and not used by uDDS.
     
1.0
    - OWNERSHIP, OWNERSHIP_STRENGTH
    - Config: udds.sedp-delay 
    - FIX: BuiltinParticipantDataListener is registered after built-in 
      entities have been created. This fixes some timing issues on startup.
    - FIX: creating an entity returns an existing entity if it has been 
      created before with the same entityId.    
      
0.9.13
    - TIME_BASE_FILTER, LIFESPAN
    
0.9.12
    - DataRepresentation & TypeConsistencyEnforcement QoS policies as Parameters on wire. 
      For DataRepresentation, only XCDR_DATA_REPRESENTATION kind is supported.
    - BaseTypeName & EquivalentTypeName parameters on wire are recognized
    - ResourceLimits: max_samples_per_instance
      
0.9.11
    - FIX: During discovery, DataWriterPolicys and DataReaderPolicys are
      passed to remote entity instead of InlineQoS policies.
    - PARTITION QoS policy with minor deviation from spec; partitions can be 
      compatible, if they both contain regular expressions. For example, 
      "part.*" partition is compatible with "partition.*". This is accomplished
      by checking partition names in both ways.
      
    
0.9.10
    - Documentation update
    - FIX: gracefully close deadline monitors during participant close
    - FIX: Duration nsec calculation from millis
    - FIX: QoS compatibility check compares to default value, if given policy is 
      not explicitly found from QoS policies.
    
0.9.9
    - Documentation update
    - Duration(-1) represents infinite Duration
    
0.9.8
    - Removed ReaderListener & WriterListener in favor of CommunicationListener.
    - DEADLINE QoS
    - DESTINATION_ORDER follows the same semantics as specified in DDS specification.
      I.e. determination is done at instance level, not at sample level
    - FIX: add INFO_DESTINATION to messages

0.9.6 - 0.9.7
    - skipped release

0.9.5
    - handle INFO_DESTINATION
    - Detect of restoration of liveliness. 
    - A Possibility to create custom TransportProviders. As a proof-of-concept,
      a new memory based TransportProvider is provided. This provider can be 
      used in configuration URIs with scheme 'mem'. 
    - Config: jrtps.discovery.announce-uris provides a list of URIs, that is used 
      to determine where to announce presence of participants.
    
0.9.4
    - Removed SampleKey. KeyHash is adequate to represent a key of samples and instances.
    - WriterLivelinessListener adds support for detecting loss of liveliness
      of writers.

0.9.3
    - FIX: primitive types are aligned on their natural boundaries.
    - First succesful interoperability test with OpenDDS. Both subscription
      and publication tests work with OpenDDS Messenger example.
    
0.9.2
    - FIX: Use parameter PID_BUILTIN_TOPIC_KEY(0x005a) during discovery
      instead of KeyHash(0x0070)
    - First successful interoperability tests with OpenSplice 6.3.
      Using Subscriber of examples.ospl.hello with slightly modified 
      version of Ospl hello example works ok. One need to write
      something like 10 samples before exiting (waiting 1 sec between
      samples), because ospl publisher exits before match making during 
      discovery is finished. 
     
0.9.1
    - Type annotation can be used to set the topic name and type name 
      reported to remote entities. 
    - Possibility to access a specific instance from writers history cache
        
0.9.0
    - DirectedWrite. RTPSReader checks if incoming data contains 
      DirectedWrite inline qos, and if so, accepts Data only if
      there is a matching Guid.
    - CoherentSet support. Coherent sets are handled by udds history
      cache.
    - PropertyList
    - ExpectsInlineQoS. RTPSWriter sends inline QoS to readers with
      each sample, if subscription data during discovery contains
      PID_EXPECTS_INLINE_QOS parameter
    
0.8.8
    - FIX: DataReader.clear() had a bug, samples were not removed.

0.8.7 
    - FIX: Keys for builtin topics are not subject to MD5 digest.
     
0.8.6
    - Added getReaders() and getWriters() to Participant. This allows 
      access to existing entities.
    
0.8.5
    - Added getGuid() method to udds Participant & Entity
     
0.8.4
    - Changed EntityFactory to be a class instead of interface.
    
0.8.3
    - Added EntityFactory. EntityFactory provides means for the application
      to provide custom implementations of entities used by udds.
      
0.8.2
    - Added direct support for java primitive types to RTPSByteBuffer
    
0.8.1
    - Minor fixes, Configuration can be given to participant. Renamed
      DataListener: add/removeListener to add/removeSampleListener.
    - One can configure any number of listener uris. Each successful
      listener uri will be transported to remote entity.
    
0.8.0
    - FIX: QosDestinationOrder is better handled during reception.
      There still remains some incompatibility as timestamp is not compared
      at instance level, but at sample level. 
    - Config: rtps.traffic.port-config: Allows configuration of PD, DG, PG etc.
    - Config: jrtps.listener-uris & jrtps.discovery.listener-uris: Allows 
      configuration of network listener receivers
    - Participant ID used can be omitted. In that case, if port numbers are 
      not explicitly given, port number will be assigned by trying different
      participant ids until a port can be opened for reception.
    - TransportProvider is used to plug different transports to jRTPS. 
      Currently, UDP is the only one available.   
    
0.7.1
    - Documentation update

0.7.0
    - DataWriter.assertLiveliness() to support Liveliness kind MANUAL_BY_TOPIC.
    - Expose Instances with DataReader & DataWriter. Also, for DataReader 
      various getXXX methods to get Samples from history cache (in addition 
      to using SampleListener).
    - FIX: KeyHash equals & hashCode, which is used as a key in Map that stores
      Instances
    - ReaderListener, WriterListener. These are used to track remote readers 
      and writers. Corresponding changes to EntityListener
    
0.6.4
    - Some refactoring, general bug fixing and documentation.
    - CacheChange is removed. Sample is used instead. 
    - FIX: time conversion from wire to millis
    - QosDurability default is VOLATILE
    
0.6.3
    - net.sf.jrtps.rtps.SampleListener is moved to udds package. 
      RTPSListener is added to rtps layer. This allows creation of 
      reader side filtering without bloating rtps layer. 
    
0.6.2
    - Configuration: rtps.writer.push-mode=true|false, 
      rtps.reader.heartbeat-suppression-duration, rtps.writer.nack-suppression-duration, 
      jrtps.publish-builtin-data=true|false, jrtps.prefer-multicast=true|false
    
0.6.1
    - Documentation is being generated with maven site plugin
    - jRTPS thread names contains domainId.participantId, which is 
      useful in debugging.
	
0.6.0
    - moved RTPS entities (RTPSParticipant, RTPSReader, ...) to net.sf.jrtps.rtps package.
    - Combined udds & jrtps. Now there is only one artifact: net.sf.jrtps:jrtps.
    - FIX: SequenceNumber long conversion

0.5.6
	- Rearranged udds test to examples. Initial interoperability tests for 
	  OpenSplice and OpenDDS. Not interoperable for now :|
	- FIX: Heartbeat announce period is applied only for reliable writers
	- FIX: Heartbeat response delay is applied before AckNack gets created
	- FIX: SequenceNumberSet reading/writing
	
0.5.5	
	- Artifacts are OSGi bundles

0.5.1
	- Heartbeat period
	- Artifacts are OSGi bundles
	- Renamed ReaderData -> SubscriptionData, WriterData PublicationData
	  to be more in sync with DDS specification.
	- JavaExternalizableMarshaller introduced.
	- FIX: Discovered participants was not propagated to RTPS layer. 
	- ParticipantLeaseManager introduced

0.5.0
	- Moved some classes from net.sf.jrtps to udds. Most of the DDS 
	  knowledge is moved. jRTPS remains as a communication library, 
          dealing with message parsing and handling of different RTPS 
	  messages, like Heartbeat & AckNack.
	  
	  The contract between DDS and RTPS is clarified. In short, DDS 
	  implementation is responsible for creation of RTPS entities. Also, 
	  determination of matched reader/writer is the responsibility of DDS 
	  layer. For writers, data is communicated through WriterCache and 
	  by a call to notifyReaders(). QualityOfService stuff is moved to 
	  uDDS as much as possible.
	
0.4.3
	- History cache work.
	- QosDurability. VOLATILE readers are sent only data after match 
	  making. For other readers, TRANSIENT_LOCAL behavior is presented.
	- QosResourceLimits: resource limits are checked. OutOfResources is 
	  thrown if exceeded.
	- QosHistory: history depth may be given. TimeoutException is thrown 
	  if a sample cannot be added reliably.
	- QosReliability: max_blocking_time. Writer blocks, if some of the 
	  reader has not received a sample and addition would drop that 
	  sample. Works in conjunction with QosHistory. 
	
0.4.2
	- Configuration with jrtps.properties: Thread pool can be tuned, 
	  heartbeatResponseDelay, nackResponseDelay, SPDP resend data period.
	- FIX: mapping of Reliabilitykind_t on the wire. This time for 
	  BEST_EFFORT :)

0.4.1
	- QosLiveliness. Partly implemented. Writer side is implemented but 
	  readers don't react on liveliness of the writers. 
	- QosReliability
	- FIX: QoS is marshalled/unmarshalled during discovery. Improved 
	  logging of QoS of discovered entities.
	- FIX: mapping of Reliabilitykind_t on the wire

0.4.0
	- Added skeletal QualityOfService at RTPS/udds layer. Entities are 
	  checked for compatible QoS before adding corresponding matched 
	  entity. QualityOfService is initialized with default values. Note, 
	  that actual Quality of Service policies are not utilized in any way.
	  
0.3.1
	- FIX: set endianness correctly according to sub-message header
	- Added some simple tests
	- buffer size is configurable
	
0.3.0
	- RTPSReader produces Samples to SampleListener
	- Fine tuned visibility.

0.2.2
	- Improved generics
	- @Key annotation is supported by JavaSerializationMarhaller, which is
	  the default marshaller for udds. Keys are marshalled by serializing 
	  fields. This results in PID_KEY_HASH being always a MD5 checksum. 
	- custom Marshallers can be registered to udds Participant
	  
0.2.1
	- Added Key as a concept; Readers and Writers are created with kind 
	  WITH_KEY or NO_KEY. At RTPS level. If key is present, Data 
	  sub-message is marshalled accordingly. uDDS remains as NO_KEY.
	- Fixed some class visibility issues
	- Added some javadocs
	
0.2.0	
	- Turned into multi module build; jrtps & udds separated.
	  udds likely needs to be moved to another package. 
	- hello world sample in udds/src/test

0.1.0	
	- Initial import
